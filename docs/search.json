[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement kjgoode@sandia.gov. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 National Technology & Engineering Solutions Sandia, LLC (NTESS). terms Contract DE-NA0003525 NTESS, U.S. Government retains certain rights software. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Katherine Goode. Maintainer, author. J. Derek Tucker. Author. Sandia National Laboratories. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goode K, Tucker J (2025). veesa: Pipeline Explainable Machine Learning Functional Data. R package version 0.1.6.","code":"@Manual{,   title = {veesa: Pipeline for Explainable Machine Learning with Functional Data},   author = {Katherine Goode and J. Derek Tucker},   year = {2025},   note = {R package version 0.1.6}, }"},{"path":"/index.html","id":"veesa-r-package","dir":"","previous_headings":"","what":"Pipeline for Explainable Machine Learning with Functional Data","title":"Pipeline for Explainable Machine Learning with Functional Data","text":"veesa R package implementing VEESA pipeline explainable approach training machine learning models functional data inputs. See preprint manuscript describing approach arXiv. Installing veesa can implemented using either commands . Keep reading example using veesa implement VEESA pipeline.","code":"# CRAN install.packages(\"veesa\")  # Development version from GitHub remotes::install_github(\"sandialabs/veesa\")"},{"path":[]},{"path":"/index.html","id":"set-up-and-data-generation","dir":"","previous_headings":"Demonstration","what":"Set Up and Data Generation","title":"Pipeline for Explainable Machine Learning with Functional Data","text":"Simulate data: Separate data training/testing: Simulated functions colored covariates:  Prepare matrices data frames: Create vector times:","code":"# Load R packages library(cowplot) library(dplyr) library(ggplot2) library(purrr) library(randomForest) library(tidyr) library(veesa)  # Specify a color palette color_pal = wesanderson::wes_palette(\"Zissou1\", 5, type = \"continuous\")  # Specify colors for PC direction plots col_plus1 = \"#784D8C\" col_plus2 = \"#A289AE\" col_minus1 = \"#EA9B44\" col_minus2 = \"#EBBC88\" col_pcdir_1sd = c(col_plus1, \"black\", col_minus1) col_pcdir_2sd = c(col_plus2, col_plus1, \"black\", col_minus1, col_minus2) sim_data = simulate_functions(M = 100, N = 75, seed = 20211130) set.seed(20211130) id = unique(sim_data$id) M_test = length(id) * 0.25 id_test = sample(x = id, size = M_test, replace = FALSE) sim_data = sim_data %>% mutate(data = ifelse(id %in% id_test, \"test\", \"train\")) prep_matrix <- function(df, train_test) {   df %>%     filter(data == train_test) %>%     select(id, t, y) %>%     ungroup() %>%     pivot_wider(id_cols = t,                 names_from = id,                 values_from = y) %>%     select(-t) %>%     as.matrix() } sim_train_matrix = prep_matrix(df = sim_data, train_test = \"train\") sim_test_matrix = prep_matrix(df = sim_data, train_test = \"test\") times = sim_data$t %>% unique()"},{"path":"/index.html","id":"alignment-and-fpca","dir":"","previous_headings":"Demonstration","what":"Alignment and fPCA","title":"Pipeline for Explainable Machine Learning with Functional Data","text":"Prepare train data Prepare test data: Plot several PCs:  Compare jfPCA coefficients train test data:","code":"train_transformed_jfpca <-   prep_training_data(     f = sim_train_matrix,     time = times,      fpca_method = \"jfpca\",     optim_method = \"DPo\"   ) test_transformed_jfpca <-   prep_testing_data(     f = sim_test_matrix,     time = times,     train_prep = train_transformed_jfpca,     optim_method = \"DPo\"   )"},{"path":"/index.html","id":"models","dir":"","previous_headings":"Demonstration","what":"Models","title":"Pipeline for Explainable Machine Learning with Functional Data","text":"Create response variable: Create data frame PCs response random forest: Fit random forest:","code":"x1_train <-    sim_data %>% filter(data == \"train\") %>%   select(id, x1) %>%   distinct() %>%    pull(x1) rf_jfpca_df <-    train_transformed_jfpca$fpca_res$coef %>%   data.frame() %>%   rename_all(.funs = function(x) stringr::str_replace(x, \"X\", \"pc\")) %>%   mutate(x1 = x1_train) %>%   select(x1, everything()) set.seed(20211130) rf_jfpca = randomForest(x1 ~ ., data = rf_jfpca_df)"},{"path":"/index.html","id":"pfi","dir":"","previous_headings":"Demonstration","what":"PFI","title":"Pipeline for Explainable Machine Learning with Functional Data","text":"Compute PFI: PFI results (mean reps):  PFI results (variability across reps):  Identify top PC elastic fPCA method: Principal directions top PC jfPCA method:","code":"set.seed(20211130) pfi_jfpca <- compute_pfi(   x = rf_jfpca_df %>% select(-x1),   y = rf_jfpca_df$x1,   f = rf_jfpca,   K = 10,   metric = \"nmse\" ) top_pc_jfpca <-    data.frame(pfi = pfi_jfpca$pfi) %>%   mutate(pc = 1:n()) %>%   arrange(desc(pfi)) %>%   slice(1) %>%   pull(pc)"},{"path":"/reference/align_pcdirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain PC directions with centered warping functions — align_pcdirs","title":"Obtain PC directions with centered warping functions — align_pcdirs","text":"function 'prep_training_data' center warping functions, leads issues visualizing joint horizontal principal component directions. function aligns principal directions improved interpretability principal directions. Currently, alignment jfPCA implemented. function 'prep_training_data' center warping functions, leads issues visualizing joint horizontal principal component directions. function aligns principal directions improved interpretability principal directions. Currently, alignment jfPCA implemented.","code":""},{"path":"/reference/align_pcdirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain PC directions with centered warping functions — align_pcdirs","text":"","code":"align_pcdirs(train_obj)  align_pcdirs(train_obj)"},{"path":"/reference/align_pcdirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain PC directions with centered warping functions — align_pcdirs","text":"train_obj Output object `prep_training_data` (jfpca )","code":""},{"path":"/reference/align_pcdirs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain PC directions with centered warping functions — align_pcdirs","text":"List structure `prep_training_data`, principal directions replaced aligned version gamI included fpca_res object. List structure `prep_training_data`, principal directions replaced aligned version gamI included fpca_res object.","code":""},{"path":"/reference/center_warping_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Center warping functions — center_warping_funs","title":"Center warping functions — center_warping_funs","text":"function 'prep_training_data' center warping functions. visualizing aligned warping functions, can easier look centered versions. function centers warping functions corresponding aligned functions.","code":""},{"path":"/reference/center_warping_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center warping functions — center_warping_funs","text":"","code":"center_warping_funs(train_obj)"},{"path":"/reference/center_warping_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center warping functions — center_warping_funs","text":"train_obj Output object `prep_training_data`","code":""},{"path":"/reference/center_warping_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Center warping functions — center_warping_funs","text":"Object structure `train_obj` qn, fn, gam         replaced centered versions","code":""},{"path":"/reference/compute_pfi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute permutation feature importance (PFI) — compute_pfi","title":"Compute permutation feature importance (PFI) — compute_pfi","text":"Function computing PFI given model dataset (training testing)","code":""},{"path":"/reference/compute_pfi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute permutation feature importance (PFI) — compute_pfi","text":"","code":"compute_pfi(x, y, f, K, metric, eps = 1e-15)"},{"path":"/reference/compute_pfi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute permutation feature importance (PFI) — compute_pfi","text":"x Dataset n observations p variables (training testing) y Response variable (matrix) associated x f Model explain K Number repetitions perform PFI metric Metric used compute PFI (choose \"accuracy\", \"logloss\", \"nmse\") eps Log loss undefined p = 0 p = 1, probabilities ","code":""},{"path":"/reference/compute_pfi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute permutation feature importance (PFI) — compute_pfi","text":"List containing pfi: Vector PFI values (averaged replicates) pfi_single_reps: Matrix containing feature importance          values replicate (rows associated reps; columns          associated data observations)","code":""},{"path":"/reference/compute_pfi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute permutation feature importance (PFI) — compute_pfi","text":"","code":"# Load packages library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tidyr) library(randomForest) #> randomForest 4.7-1.1 #> Type rfNews() to see new features/changes/bug fixes. #>  #> Attaching package: ‘randomForest’ #> The following object is masked from ‘package:dplyr’: #>  #>     combine  # Select a subset of functions from shifted peaks data sub_ids <-   shifted_peaks$data |>   select(data, group, id) |>   distinct() |>   group_by(data, group) |>   slice(1:4) |>   ungroup()  # Create a smaller version of shifted data shifted_peaks_sub <-   shifted_peaks$data |>   filter(id %in% sub_ids$id)  # Extract times shifted_peaks_times = unique(shifted_peaks_sub$t)  # Convert training data to matrix shifted_peaks_train_matrix <-   shifted_peaks_sub |>   filter(data == \"Training\") |>   select(-t) |>   mutate(index = paste0(\"t\", index)) |>   pivot_wider(names_from = index, values_from = y) |>   select(-data, -id, -group) |>   as.matrix() |>   t()  # Obtain veesa pipeline training data veesa_train <-   prep_training_data(     f = shifted_peaks_train_matrix,     time = shifted_peaks_times,     fpca_method = \"jfpca\"   ) #> ℹ Using lambda = 0 #> ℹ Initializing... #> ℹ Computing Karcher mean of 8 functions in SRSF space... #> ℹ Entering iteration 1...  # Obtain response variable values model_output <-   shifted_peaks_sub |>   filter(data == \"Training\") |>   select(id, group) |>   distinct()  # Prepare data for model model_data <-   veesa_train$fpca_res$coef |>   data.frame() |>   mutate(group = factor(model_output$group))  # Train model set.seed(20210301) rf <-   randomForest(     formula = group ~ .,     data = model_data   )  # Compute feature importance values pfi <-   compute_pfi(     x = model_data |> select(-group),     y = model_data$group,     f = rf,     K = 1,     metric = \"accuracy\"  )"},{"path":"/reference/plot_pc_directions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot principal component directions — plot_pc_directions","title":"Plot principal component directions — plot_pc_directions","text":"Function plotting functional PC directions","code":""},{"path":"/reference/plot_pc_directions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot principal component directions — plot_pc_directions","text":"","code":"plot_pc_directions(   fpcs,   fdasrvf,   fpca_method,   times = NULL,   digits = 0,   alpha = 1,   nrow = 1,   linesizes = NULL,   linetype = TRUE,   freey = FALSE )"},{"path":"/reference/plot_pc_directions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot principal component directions — plot_pc_directions","text":"fpcs Vector numbers identifying PCs include plot fdasrvf Object output jointFPCA, horizFPCA, vertFPCA fpca_method Character string specifying type elastic fPCA method use ('jfpca', 'hfpca', 'vfpca') times Optional vector times (included, times represented interval 0 1) digits Number digits print title proportion variability explained PC alpha Vector alpha values associated lines plot (length must match number lines plot) nrow Number rows use creating grid plots linesizes Vector line widths associated lines plot (length must match number lines plot) linetype Vector line types (e.g., \"solid\" \"dashed\") associated lines plot (length must match number lines plot) freey Indicator whether y-axis freed across facets","code":""},{"path":"/reference/plot_pc_directions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot principal component directions — plot_pc_directions","text":"ggplot2 plot specified principal component directions","code":""},{"path":"/reference/plot_pc_directions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot principal component directions — plot_pc_directions","text":"","code":"# Load packages library(dplyr) library(tidyr)  # Select a subset of functions from shifted peaks data sub_ids <-   shifted_peaks$data |>   select(data, group, id) |>   distinct() |>   group_by(data, group) |>   slice(1:4) |>   ungroup()  # Create a smaller version of shifted data shifted_peaks_sub <-   shifted_peaks$data |>   filter(id %in% sub_ids$id)  # Extract times shifted_peaks_times = unique(shifted_peaks_sub$t)  # Convert training data to matrix shifted_peaks_train_matrix <-   shifted_peaks_sub |>   filter(data == \"Training\") |>   select(-t) |>   mutate(index = paste0(\"t\", index)) |>   pivot_wider(names_from = index, values_from = y) |>   select(-data, -id, -group) |>   as.matrix() |>   t()  # Obtain veesa pipeline training data veesa_train <-   prep_training_data(     f = shifted_peaks_train_matrix,     time = shifted_peaks_times,     fpca_method = \"jfpca\"   ) #> ℹ Using lambda = 0 #> ℹ Initializing... #> ℹ Computing Karcher mean of 8 functions in SRSF space... #> ℹ Entering iteration 1...  # Plot principal directions of PC1 plot_pc_directions(   fpcs = 1,   fdasrvf = veesa_train$fpca_res,   fpca_method = \"jfpca\",   times = -shifted_peaks_times,   linesizes = rep(0.75,5),   alpha = 0.9  )"},{"path":"/reference/prep_testing_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Align test data and apply fPCA using elastic method applied to training data — prep_testing_data","title":"Align test data and apply fPCA using elastic method applied to training data — prep_testing_data","text":"Applies steps 2 3 VEESA pipeline (alignment elastic fPCA     (jfpca, hfpca, vfpca)) testing data based training     data prepared using \"prep_training_data\".","code":""},{"path":"/reference/prep_testing_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align test data and apply fPCA using elastic method applied to training data — prep_testing_data","text":"","code":"prep_testing_data(f, time, train_prep, optim_method = \"DP\")"},{"path":"/reference/prep_testing_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align test data and apply fPCA using elastic method applied to training data — prep_testing_data","text":"f Matrix (size M x N) test data N functions M samples. time Vector size M describing sample points train_prep Object returned applying \"prep_training_data\" training data. optim_method Method used optimization computing Karcher mean. \"DP\", \"DPo\", \"RBFGS\".","code":""},{"path":"/reference/prep_testing_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align test data and apply fPCA using elastic method applied to training data — prep_testing_data","text":"List containing (varies slightly based fpca method used): time: vector times functions observed (length M) f0: original test data functions - matrix (M x N) N functions         M samples fn: aligned test data functions - similar structure f0 q0: original test data SRSFs - similar structure f0 qn: aligned test data SRSFs - similar structure f0 mqn: training data SRSF mean (test data functions aligned         function) gam: test data warping functions - similar structure f0 coef: test data principal component coefficients psi: test data warping function SRVFs - similar structure f0         (jfpca hfpca ) nu: test data shooting functions - similar structure f0 (jfpca         hfpca ) g: test data combination aligned shooting functions (jfpca         )","code":""},{"path":"/reference/prep_testing_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align test data and apply fPCA using elastic method applied to training data — prep_testing_data","text":"","code":"# Load packages library(dplyr) library(tidyr)  # Select a subset of functions from shifted peaks data sub_ids <-   shifted_peaks$data |>   select(data, group, id) |>   distinct() |>   group_by(data, group) |>   slice(1:4) |>   ungroup()  # Create a smaller version of shifted data shifted_peaks_sub <-   shifted_peaks$data |>   filter(id %in% sub_ids$id)  # Extract times shifted_peaks_times = unique(shifted_peaks_sub$t)  # Convert training data to matrix shifted_peaks_train_matrix <-   shifted_peaks_sub |>   filter(data == \"Training\") |>   select(-t) |>   mutate(index = paste0(\"t\", index)) |>   pivot_wider(names_from = index, values_from = y) |>   select(-data, -id, -group) |>   as.matrix() |>   t()  # Obtain veesa pipeline training data veesa_train <-   prep_training_data(     f = shifted_peaks_train_matrix,     time = shifted_peaks_times,     fpca_method = \"jfpca\"   ) #> ℹ Using lambda = 0 #> ℹ Initializing... #> ℹ Computing Karcher mean of 8 functions in SRSF space... #> ℹ Entering iteration 1...  # Convert testing data to matrix shifted_peaks_test_matrix <-   shifted_peaks_sub |>   filter(data == \"Testing\") |>   select(-t) |>   mutate(index = paste0(\"t\", index)) |>   pivot_wider(names_from = index, values_from = y) |>   select(-data, -id, -group) |>   as.matrix() |>   t()  # Obtain veesa pipeline testing data veesa_test <- prep_testing_data(   f = shifted_peaks_test_matrix,   time = shifted_peaks_times,   train_prep = veesa_train,   optim_method = \"DP\"  )"},{"path":"/reference/prep_training_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Align training data and apply a method of elastic fPCA — prep_training_data","title":"Align training data and apply a method of elastic fPCA — prep_training_data","text":"Applies steps 2 3 VEESA pipeline (alignment elastic fPCA) training data     preparation inputting data model step 4.","code":""},{"path":"/reference/prep_training_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align training data and apply a method of elastic fPCA — prep_training_data","text":"","code":"prep_training_data(   f,   time,   fpca_method,   lambda = 0,   penalty_method = c(\"roughness\", \"geodesic\", \"norm\"),   centroid_type = c(\"mean\", \"median\"),   center_warpings = TRUE,   parallel = FALSE,   cores = -1,   optim_method = c(\"DP\", \"DPo\", \"DP2\", \"RBFGS\"),   max_iter = 20L,   id = NULL,   C = NULL,   ci = c(-2, -1, 0, 1, 2) )"},{"path":"/reference/prep_training_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align training data and apply a method of elastic fPCA — prep_training_data","text":"f Matrix (size M x N) training data N functions M samples. time Vector size M corresponding M sample points. fpca_method Character string specifying type elastic fPCA method use. Options 'jfpca', 'hfpca', 'vfpca'. lambda Numeric value specifying elasticity. Default 0. penalty_method String specifying penalty term used formulation cost function minimize alignment. Choices \"roughness\" uses norm second derivative, \"geodesic\" uses geodesic distance identity \"norm\" uses Euclidean distance identity. Defaults \"roughness\". centroid_type String specifying type centroid align . Options \"mean\" \"median\". Defaults \"mean\". center_warpings Boolean specifying whether center estimated warping functions. Defaults TRUE. parallel Boolean specifying whether run calculations parallel. Defaults FALSE. cores Integer specifying number cores parallel. Default -1, uses cores. optim_method Method used optimization computing Karcher mean. Options \"DP\", \"DPo\", \"RBFGS\". max_iter integer value specifying maximum number iterations. Defaults 20L. id Integration point f0. Default midpoint. C Balance value. Default = NULL. ci Geodesic standard deviations computed. Default c(-2, -1, 0, 1, 2).","code":""},{"path":"/reference/prep_training_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align training data and apply a method of elastic fPCA — prep_training_data","text":"List three objects: alignment: output fdasrvf::time_warping fpca_type: type elastic FPCA method applied fpca_res: output fdasrvf::jointFPCA, fdasrvf::horizFPCA,         fdasrvf::vertFPCA (dependent fpca_type)","code":""},{"path":"/reference/prep_training_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align training data and apply a method of elastic fPCA — prep_training_data","text":"","code":"# Load packages library(dplyr) library(tidyr)  # Select a subset of functions from shifted peaks data sub_ids <-   shifted_peaks$data |>   select(data, group, id) |>   distinct() |>   group_by(data, group) |>   slice(1:4) |>   ungroup()  # Create a smaller version of shifted data shifted_peaks_sub <-   shifted_peaks$data |>   filter(id %in% sub_ids$id)  # Extract times shifted_peaks_times = unique(shifted_peaks_sub$t)  # Convert training data to matrix shifted_peaks_train_matrix <-   shifted_peaks_sub |>   filter(data == \"Training\") |>   select(-t) |>   mutate(index = paste0(\"t\", index)) |>   pivot_wider(names_from = index, values_from = y) |>   select(-data, -id, -group) |>   as.matrix() |>   t()  # Obtain veesa pipeline training data veesa_train <-   prep_training_data(     f = shifted_peaks_train_matrix,     time = shifted_peaks_times,     fpca_method = \"jfpca\"   ) #> ℹ Using lambda = 0 #> ℹ Initializing... #> ℹ Computing Karcher mean of 8 functions in SRSF space... #> ℹ Entering iteration 1..."},{"path":"/reference/shifted_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"simulated dataset generated examples veesa pipeline manuscript.  code used prepare dataset, see https://github.com/sandialabs/veesa/inst/data-shifted-peaks.md.","code":""},{"path":"/reference/shifted_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"shifted_peaks"},{"path":"/reference/shifted_peaks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"","text":"list.","code":""},{"path":"/reference/shifted_peaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"","text":"objects list :","code":""},{"path":"/reference/simulate_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate example functional data — simulate_functions","title":"Simulate example functional data — simulate_functions","text":"Function simulating set functional data based deterministic function     covariates affect shape functions","code":""},{"path":"/reference/simulate_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate example functional data — simulate_functions","text":"","code":"simulate_functions(M, N, seed)"},{"path":"/reference/simulate_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate example functional data — simulate_functions","text":"M Number functions N Number samples per function seed Seed reproducibility","code":""},{"path":"/reference/simulate_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate example functional data — simulate_functions","text":"Data frame following columns (f function): t: \"time\" associated sample function t [0,1] y: f(t) particular observation x1: covariate 1 function $f$ (constant across time) x2: covariate 2 function $f$ (constant across time) x3: covariate 3 function $f$ (constant across time)","code":""},{"path":"/reference/simulate_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate example functional data — simulate_functions","text":"functions generated using following equation: f(t) = (x_1*exp(-((t-0.3)^2)/0.005)) + (x_2(-((t-(0.7+x_3))^2/0.005))) covariates generated follows: x_1 generated Unif(0.1,1) x_2 generated Unif(0.1,0.5) x_3 generated Unif(-0.1,0.1)","code":""},{"path":"/reference/simulate_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate example functional data — simulate_functions","text":"","code":"# Simulate data sim_data = simulate_functions(M = 100, N = 75, seed = 20211130)"},{"path":"/news/index.html","id":"veesa-015","dir":"Changelog","previous_headings":"","what":"veesa 0.1.5","title":"veesa 0.1.5","text":"Resubmission CRAN fixes Made CRAN","code":""},{"path":"/news/index.html","id":"veesa-015-1","dir":"Changelog","previous_headings":"","what":"veesa 0.1.5","title":"veesa 0.1.5","text":"Resubmission CRAN fixes","code":""},{"path":"/news/index.html","id":"veesa-014","dir":"Changelog","previous_headings":"","what":"veesa 0.1.4","title":"veesa 0.1.4","text":"Initial CRAN submission! Documentation clean ","code":""},{"path":"/news/index.html","id":"veesa-013","dir":"Changelog","previous_headings":"","what":"veesa 0.1.3","title":"veesa 0.1.3","text":"Updated inputs prep_training_data match fdasrvf Added examples documentation Cleaned wording documentation bit Added tests","code":""},{"path":"/news/index.html","id":"veesa-012","dir":"Changelog","previous_headings":"","what":"veesa 0.1.2","title":"veesa 0.1.2","text":"Added shifted peaks data Added example code manuscript","code":""},{"path":"/news/index.html","id":"veesa-011","dir":"Changelog","previous_headings":"","what":"veesa 0.1.1","title":"veesa 0.1.1","text":"Adjusted title plot_pc_directions Updated code new version fdasrvf","code":""},{"path":"/news/index.html","id":"veesa-010","dir":"Changelog","previous_headings":"","what":"veesa 0.1.0","title":"veesa 0.1.0","text":"Initial version package","code":""}]
